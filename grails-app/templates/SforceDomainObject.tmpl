/**
 * Auto-generated class by Salesforce Grails plugin.
 * Riptide Force.
 *
 * Represents the ${TYPE_NAME} Salesforce object as a grails domain object.
 */
package ${PACKAGE}

import com.riptideforce.sfdc.metadata.*

<%
    // Class name
    String className = "${TYPE_NAME}"
    if( className.endsWith("__c") ) {
        className = className.substring(0, className.length()-3)
    }

    String sfClassName = "${className}"
    className = "SF${className}"
%>

class ${className} {

<%
// Field to type map
def typeMap = [:];

for( field in TYPE_DESC.getFields() ) {

    String gFieldName = field.getName();
    if( gFieldName.endsWith("__c") ) {
        String newFieldName = gFieldName.substring(0, gFieldName.length()-3)
        boolean fieldExists = false

        for( fieldI in TYPE_DESC.getFields() ) {
            if( fieldI.getName().equalsIgnoreCase(newFieldName) ) {
                fieldExists = true
                break
            }
        }

        if( !fieldExists ) {
            gFieldName = newFieldName
        }
    }

    String fieldType

    // type translation
    switch( field.getType() ) {
        case "string":
            fieldType = "String"
            break
		case "int":
            fieldType = "Integer"
            break
        case "double":
            fieldType = "Double"
            break
        case "boolean":
            fieldType = "Boolean"
            break
        case "date":
            fieldType = "Date"
            break
        case "datetime":
            fieldType = "Calendar"
            break
        case "base64":
            fieldType = "byte[]"
            break
        case "picklist":
            fieldType = "String"
            break
        case "multipicklist":
            fieldType = "List"
            break
        case "currency":
            fieldType = "Double"
            break
        default:
            fieldType = "String"
            break
    }

    typeMap.put(field.getName(), fieldType)
    boolean createable = field.getCreateable();
    boolean updateable = field.getUpdateable();
    boolean isId = (field.getName().equals("Id"));

%>
    ${fieldType} ${gFieldName}
<%
}
%>

    static mapping = {
        // Override the generated pk as the Salesforce object may already have one
        id name:'pk', column:'pk', type:'long'
    }

    public void copyFrom( def obj ) {

        // For all fields
        ${sfClassName}.class.getDeclaredFields().each { field ->

            if( field.getAnnotation(SalesforceField.class) != null ) {

                // get the field name and value
                String fieldName = field.getName()
                fieldName = fieldName[0..0].toLowerCase() + fieldName.substring(1)

                Object fieldVal = obj."\${fieldName}"

                this."\${fieldName}" = fieldVal
            }

        }

    }


    public ${sfClassName} toSalesforceObject() {

        def sfObj = new TestObject()

        // For all fields
        ${sfClassName}.class.getDeclaredFields().each { field ->


            if( field.getAnnotation(SalesforceField.class) != null ) {

                // get the field name and value
                String fieldName = field.getName()
                fieldName = fieldName[0..0].toLowerCase() + fieldName.substring(1)

                Object fieldVal = this."\${fieldName}"

                sfObj."\${fieldName}" = fieldVal
            }

        }

        return sfObj
    }

}