/**
 * Auto-generated class by Salesforce Grails plugin.
 * Riptide Force.
 *
 * Represents the ${TYPE_NAME} Salesforce object.
 */
package ${PACKAGE}

import com.sforce.soap.partner.*
import com.sforce.soap.partner.sobject.SObject
import org.apache.axiom.om.*
import com.riptideforce.sfdc.soap.util.SObjectConversionUtil

class ${TYPE_NAME} implements java.io.Serializable {

<%
// Field to type map
def typeMap = [:];

for( field in TYPE_DESC.getFields() ) {

    String fieldType

    // type translation
    switch( field.getType() ) {
        case "string": 
            fieldType = "String"
            break
		case "int":
            fieldType = "Integer"
            break
        case "double":
            fieldType = "Double"
            break
        case "boolean":
            fieldType = "Boolean"
            break
        case "date":
            fieldType = "Date"
            break
        case "datetime":
            fieldType = "Calendar"
            break
        case "base64":
            fieldType = "byte[]"
            break
        default:
            fieldType = "String"
            break
    }
    
    typeMap.put(field.getName(), fieldType)

%>
    ${fieldType} ${field.getName()}
<%
}
%>

    /*
     * Builds an account from its Soap implementation.
     */
    public static ${TYPE_NAME} build${TYPE_NAME}( SObject so ) {

        OMElement[] elems = so.getExtraElement();
        def object = new ${TYPE_NAME}()

        for( OMElement elem : elems ) {

            switch( elem.getLocalName() ) {


<%
for( field in TYPE_DESC.getFields() ) {
%>
                case '${field.getName()}':
                    if( elem.getText() != null ) {
                        object.${field.getName()} = SObjectConversionUtil.convertToJavaType( elem.getText(), "${typeMap.get(field.getName())}" )
                    }
                    break
<%
}
%>
            }

        }

        return object
    }

    /*
     * Returns an sObject to send to the Salesforce API to create as new.
     * This object will not work if updating an existing object.
     */
    public SObject toNewSObject() {

        SObject sObj = new SObject();
        sObj.setType("${TYPE_NAME}");

        OMFactory fac = OMAbstractFactory.getOMFactory();

<%
for( field in TYPE_DESC.getFields() ) {
    if( field.getCreateable() ) {
%>
        // if the ${field.getName()} field is null
        if( this.${field.getName()} == null ) {
            sObj.addFieldsToNull("${field.getName()}");
        }
        // otherwise
        else {
            OMElement newElem =
                fac.createOMElement("${field.getName()}",
                    fac.createOMNamespace("urn:sobject.partner.soap.sforce.com", "ns2"));
            newElem.setText( SObjectConversionUtil.convertToString( this.${field.getName()} ) );
            sObj.addExtraElement( newElem );
        }
<%
    }
}
%>


        return sObj
    }

    /*
     * Returns an sObject to send to the Salesforce API to update.
     * This object might not work if creating a new object.
     */
    public SObject toSObject() {

        SObject sObj = new SObject();
        sObj.setType("${TYPE_NAME}");

<%
def idField = TYPE_DESC.getFields().find {it.getName() == 'Id'}
if( idField != null ) {
%>
        // create an Id if this is not a new object
        if( this.Id != null ) {
            ID objId = new ID();

            objId.setID( this.Id );
            sObj.setId( objId );
        }
<%
}
%>

        OMFactory fac = OMAbstractFactory.getOMFactory();

<%
for( field in TYPE_DESC.getFields() ) {
    if( field.getUpdateable() ) {
%>
        // if the ${field.getName()} field is null
        if( this.${field.getName()} == null ) {
            sObj.addFieldsToNull("${field.getName()}");
        }
        // otherwise
        else {
            OMElement newElem =
                fac.createOMElement("${field.getName()}",
                    fac.createOMNamespace("urn:sobject.partner.soap.sforce.com", "ns2"));
            newElem.setText( SObjectConversionUtil.convertToString( this.${field.getName()} ) );
            sObj.addExtraElement( newElem );
        }
<%
    }
}
%>


        return sObj
    }


    public String toString() {
        String strVal = "";

<%
for( field in TYPE_DESC.getFields() ) {
%>
        strVal = strVal + "${field.getName()}: " + ${field.getName()} + "\\n"
<%
}
%>
        return strVal
    }

}