/**
 * Auto-generated class by Salesforce Grails plugin.
 * Riptide Force.
 *
 * Represents the ${TYPE_NAME} Salesforce object.
 */
package ${PACKAGE}

import com.sforce.soap.partner.*
import com.sforce.soap.partner.sobject.SObject
import org.apache.axiom.om.*
import com.riptideforce.sfdc.metadata.*
import com.riptideforce.sfdc.soap.util.SObjectConversionUtil

import java.lang.reflect.*


class ${TYPE_NAME} implements java.io.Serializable {

<%
// Field to type map
def typeMap = [:];

for( field in TYPE_DESC.getFields() ) {

    String fieldType

    // type translation
    switch( field.getType() ) {
        case "string": 
            fieldType = "String"
            break
		case "int":
            fieldType = "Integer"
            break
        case "double":
            fieldType = "Double"
            break
        case "boolean":
            fieldType = "Boolean"
            break
        case "date":
            fieldType = "Date"
            break
        case "datetime":
            fieldType = "Calendar"
            break
        case "base64":
            fieldType = "byte[]"
            break
        case "picklist":
            fieldType = "String"
            break
        case "multipicklist":
            fieldType = "List"
            break
        default:
            fieldType = "String"
            break
    }
    
    typeMap.put(field.getName(), fieldType)
    boolean createable = field.getCreateable();
    boolean updateable = field.getUpdateable();

%>
    @SalesforceField( name="${field.getName()}", createable=${createable}, updateable=${updateable} )
    ${fieldType} ${field.getName()}
<%
}
%>

<%
for( field in TYPE_DESC.getFields() ) {
    if( field.getType().toString() == "picklist"
        || field.getType().toString() == "multipicklist" ) {
%>
    public static String[] get${field.getName()}ValidValues() {
        def validValues = []
<%
        field.getPicklistValues().each { entry ->
            String value = entry.getValue()
            value = value.replaceAll("'", "\\\\'");
%>
        validValues << '${value}'
<%
        }
%>
        return validValues
    }
<%
    }
}
%>

    /*
     * Builds an account from its Soap implementation.
     */
    public static ${TYPE_NAME} build${TYPE_NAME}( SObject so ) {

        OMElement[] elems = so.getExtraElement();
        def object = new ${TYPE_NAME}()

        for( OMElement elem : elems ) {

            // invoke the setter if found
            try {
                // find the setter and the argument type
                String type = object.getClass().getDeclaredField(elem.getLocalName()).getType().getName()
                object."set\${elem.getLocalName()}"(SObjectConversionUtil.convertToJavaType( elem.getText(), type ))
            }
            catch(NoSuchMethodException nsmex) {
                // The plugin classes might be out of date
                // TODO Log a message to warn
            }

        }

        return object
    }

    /*
     * Returns an sObject to send to the Salesforce API to create as new.
     * This object will not work if updating an existing object.
     */
    public SObject toNewSObject() {

        SObject sObj = new SObject();
        sObj.setType("${TYPE_NAME}");

        OMFactory fac = OMAbstractFactory.getOMFactory();

        // For all declared fields
        ${TYPE_NAME}.class.getDeclaredFields().each { field ->
            SalesforceField sfAnnotation = field.getAnnotation(SalesforceField.class)

            if( sfAnnotation != null ) {
                if( sfAnnotation.createable() ) {

                    // get the value
                    Object fieldVal = this."get\${field.getName()}"()
                    String fieldName = field.getName()

                    // if the field is null
                    if( fieldVal == null ) {
                        sObj.addFieldsToNull( fieldName );
                    }
                    // otherwise
                    else {
                        OMElement newElem =
                            fac.createOMElement(fieldName,
                                fac.createOMNamespace("urn:sobject.partner.soap.sforce.com", "ns2"));
                        newElem.setText( SObjectConversionUtil.convertToString( fieldVal ) );
                        sObj.addExtraElement( newElem );
                    }
                }
            }
        }

        return sObj
    }

    /*
     * Returns an sObject to send to the Salesforce API to update.
     * This object might not work if creating a new object.
     */
    public SObject toSObject() {

        SObject sObj = new SObject();
        sObj.setType("${TYPE_NAME}");

<%
def idField = TYPE_DESC.getFields().find {it.getName() == 'Id'}
if( idField != null ) {
%>
        // create an Id if this is not a new object
        if( this.Id != null ) {
            ID objId = new ID();

            objId.setID( this.Id );
            sObj.setId( objId );
        }
<%
}
%>

        OMFactory fac = OMAbstractFactory.getOMFactory();

        // For all declared fields
        ${TYPE_NAME}.class.getDeclaredFields().each { field ->
            SalesforceField sfAnnotation = field.getAnnotation(SalesforceField.class)

            if( sfAnnotation != null ) {
                if( sfAnnotation.updateable() ) {

                    // get the value
                    Object fieldVal = this."get\${field.getName()}"()
                    String fieldName = field.getName()

                    // if the field is null
                    if( fieldVal == null ) {
                        sObj.addFieldsToNull( fieldName );
                    }
                    // otherwise
                    else {
                        OMElement newElem =
                            fac.createOMElement(fieldName,
                                fac.createOMNamespace("urn:sobject.partner.soap.sforce.com", "ns2"));
                        newElem.setText( SObjectConversionUtil.convertToString( fieldVal ) );
                        sObj.addExtraElement( newElem );
                    }
                }
            }
        }


        return sObj
    }


    public String toString() {
        String strVal = "${TYPE_NAME} ---\\n";

        // For all annotated fields
        ${TYPE_NAME}.class.getDeclaredFields().each { field ->

            if( field.getAnnotation(SalesforceField.class) != null ) {

                // get the value
                Object fieldVal = this."get\${field.getName()}"()
                String fieldName = field.getName()

                strVal += fieldName + ": " + fieldVal + "\\n"

            }
        }
        return strVal
    }

}