/**
 * Auto-generated class by Salesforce Grails plugin.
 * Riptide Force.
 *
 * Represents the ${TYPE_NAME} Salesforce object.
 */
package ${PACKAGE}
<%
    String className = "${TYPE_NAME}"
    if( className.endsWith("__c") ) {
        className = className.substring(0, className.length()-3)
    }
%>
import com.riptide.salesforce.metadata.*
import com.riptide.salesforce.provider.SObjectConversionUtil

import java.lang.reflect.*

@SalesforceObject(name="${TYPE_NAME}")
class ${className} implements java.io.Serializable {

<%
// Field to type map
def typeMap = [:]
def picklistFields = []
def nillableFields = []
def fieldSizes = [:]
def groovyFieldNames = []

for( field in TYPE_DESC.getFields() ) {

    String gFieldName = field.getName();
    if( gFieldName.endsWith("__c") ) {
        String newFieldName = gFieldName.substring(0, gFieldName.length()-3)
        boolean fieldExists = false

        for( fieldI in TYPE_DESC.getFields() ) {
            if( fieldI.getName().equalsIgnoreCase(newFieldName) ) {
                fieldExists = true
                break
            }
        }

        if( !fieldExists ) {
            gFieldName = newFieldName
        }
    }
    
    gFieldName = gFieldName.substring(0,1).toLowerCase() + gFieldName.substring(1)


	// Add to the global list of field names
	groovyFieldNames << gFieldName
	
    String fieldType

    // type translation
    switch( field.getType() ) {
        case "STRING":
            fieldType = "String"
            break
        case "INT":
            fieldType = "Integer"
            break
        case "DOUBLE":
            fieldType = "Double"
            break
        case "BOOLEAN":
            fieldType = "Boolean"
            break
        case "DATE":
            fieldType = "Date"
            break
        case "DATETIME":
            fieldType = "Calendar"
            break
        case "BASE64":
            fieldType = "byte[]"
            break
        case "PICKLIST":
            fieldType = "String"
            break
        case "MULTIPICKLIST":
            fieldType = "List"
            break
        case "CURRENCY":
            fieldType = "Double"
            break
        default:
            fieldType = "String"
            break
    }

    typeMap.put(field.getName(), fieldType)
    boolean createable = field.isCreateable();
    boolean updateable = field.isUpdateable();
    boolean isId = (field.getName().equals("Id"));
    boolean required = !field.isNillable();
    
    // Change the Id field for domain classes
    if( IS_DOMAIN_CLASS && isId ) {
        gFieldName = 'salesforceId'
        groovyFieldNames << gFieldName
        groovyFieldNames.remove('id')
    }
    
    // Add the field to the map of picklist fields
    if(field.getType().value() == "multipicklist" ) {
        picklistFields << gFieldName
    }
    
    // Add the field to the collection of nillable fields
    if(field.isNillable() || !field.isCreateable()) {
        nillableFields << gFieldName
    }
    
    // Field constraints for size (only for strings)
    if(fieldType == "String") {
    	if( field.length > 0 ) {
    		fieldSizes.put( gFieldName, field.length )
    	}
    }

%>
    @SalesforceField( name="${field.getName()}", createable=${createable}, updateable=${updateable}, isId=${isId}, required=${required} )
    ${fieldType} ${gFieldName}
<%
}
%>

<%
if( IS_DOMAIN_CLASS ) {

	// Generate the hasMany collection
    def hasManyMappingStrings = []
    picklistFields.each {
        hasManyMappingStrings << "${it}:String"
    }
    
    if(picklistFields.size > 0) {
%>
    static hasMany = [${hasManyMappingStrings.join(", \n        ")}]
<%
    }
    
    
    def constraintMappingStrings = []
    
    // Generate the field constraints
    for( gField in groovyFieldNames ) {
    	def constraints = []
    	
    	// Nullable field
    	if( nillableFields.contains( gField ) ) {
    		constraints << "nullable:true"
    	}
    	
    	// Size constraints
    	if( fieldSizes.containsKey(gField) ) {
    		constraints << "size:0..${fieldSizes[gField]}"
    	}
 
        // Only add the fields that actually have constraints   	
    	if( constraints.size() > 0 ) {
    		constraintMappingStrings << "${gField} (" + constraints.join(', ') + ")"
        }
    }
    
    // Print the constraints
    println "    static constraints = {"
    constraintMappingStrings.each {
        println "        ${it}"
    }
    println "    }"
}
%>


<%
for( field in TYPE_DESC.getFields() ) {

    String gFieldName = field.getName();
    if( gFieldName.endsWith("__c") ) {
        String newFieldName = gFieldName.substring(0, gFieldName.length()-3)
        boolean fieldExists = false

        for( fieldI in TYPE_DESC.getFields() ) {
            if( fieldI.getName().equalsIgnoreCase(newFieldName) ) {
                fieldExists = true
                break
            }
        }

        if( !fieldExists ) {
            gFieldName = newFieldName
        }
    }

    if( field.getType().toString() == "picklist"
        || field.getType().toString() == "multipicklist" ) {
%>
    public static String[] get${gFieldName}ValidValues() {
        def validValues = []
<%
        field.getPicklistValues().each { entry ->
            String value = entry.getValue()
            value = value.replaceAll("'", "\\\\'");
%>
        validValues << '${value}'
<%
        }
%>
        return validValues
    }
<%
    }
}
%>


    public String toString() {
        String strVal = "${TYPE_NAME} ---\\n";

        // For all annotated fields
        ${className}.class.getDeclaredFields().each { field ->

            if( field.getAnnotation(SalesforceField.class) != null ) {

                // get the value
                Object fieldVal = this."\${field.getName()}"
                String fieldName = field.getName()

                strVal += fieldName + ": " + fieldVal + "\\n"

            }
        }
        return strVal
    }

}