/**
 * Auto-generated class by Salesforce Grails plugin.
 * Riptide Force.
 *
 * Represents the ${TYPE_NAME} Salesforce object.
 */
package ${PACKAGE}
<%
    String className = "${TYPE_NAME}"
    if( className.endsWith("__c") ) {
        className = className.substring(0, className.length()-3)
    }
%>
import com.sforce.soap.partner.*
import com.sforce.soap.partner.sobject.SObject
import org.apache.axiom.om.*
import com.riptideforce.sfdc.metadata.*
import com.riptideforce.sfdc.soap.util.SObjectConversionUtil

import java.lang.reflect.*

@SalesforceObject(name="${TYPE_NAME}")
class ${className} implements java.io.Serializable {

<%
// Field to type map
def typeMap = [:];

for( field in TYPE_DESC.getFields() ) {

    String gFieldName = field.getName();
    if( gFieldName.endsWith("__c") ) {
        gFieldName = gFieldName.substring(0, gFieldName.length()-3)
    }

    String fieldType

    // type translation
    switch( field.getType() ) {
        case "string":
            fieldType = "String"
            break
		case "int":
            fieldType = "Integer"
            break
        case "double":
            fieldType = "Double"
            break
        case "boolean":
            fieldType = "Boolean"
            break
        case "date":
            fieldType = "Date"
            break
        case "datetime":
            fieldType = "Calendar"
            break
        case "base64":
            fieldType = "byte[]"
            break
        case "picklist":
            fieldType = "String"
            break
        case "multipicklist":
            fieldType = "List"
            break
        default:
            fieldType = "String"
            break
    }

    typeMap.put(field.getName(), fieldType)
    boolean createable = field.getCreateable();
    boolean updateable = field.getUpdateable();
    boolean isId = (field.getName().equals("Id"));

%>
    @SalesforceField( name="${field.getName()}", createable=${createable}, updateable=${updateable}, isId=${isId} )
    ${fieldType} ${gFieldName}
<%
}
%>

<%
for( field in TYPE_DESC.getFields() ) {

    String gFieldName = field.getName();
    if( gFieldName.endsWith("__c") ) {
        gFieldName = gFieldName.substring(0, gFieldName.length()-3)
    }

    if( field.getType().toString() == "picklist"
        || field.getType().toString() == "multipicklist" ) {
%>
    public static String[] get${gFieldName}ValidValues() {
        def validValues = []
<%
        field.getPicklistValues().each { entry ->
            String value = entry.getValue()
            value = value.replaceAll("'", "\\\\'");
%>
        validValues << '${value}'
<%
        }
%>
        return validValues
    }
<%
    }
}
%>


    public String toString() {
        String strVal = "${TYPE_NAME} ---\\n";

        // For all annotated fields
        ${className}.class.getDeclaredFields().each { field ->

            if( field.getAnnotation(SalesforceField.class) != null ) {

                String getter = SObjectConversionUtil.getDynamicGetterForField(field.getName());

                // get the value
                Object fieldVal = this."\${getter}"()
                String fieldName = field.getName()

                strVal += fieldName + ": " + fieldVal + "\\n"

            }
        }
        return strVal
    }

}